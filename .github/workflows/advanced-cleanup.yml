name: Advanced Workflow Cleanup

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      days_to_keep:
        description: 'Number of days to keep workflow runs'
        required: false
        default: '30'
      minimum_runs:
        description: 'Minimum runs to keep per workflow'
        required: false
        default: '5'

jobs:
  cleanup-workflow-runs:
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 List Current Workflow Runs
        run: |
          echo "Current workflow runs count:"
          gh api repos/${{ github.repository }}/actions/runs --paginate | jq '.workflow_runs | length'
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: 🧹 Clean Up Old Runs
        uses: actions/github-script@v7
        with:
          script: |
            const daysToKeep = parseInt('${{ github.event.inputs.days_to_keep || '30' }}');
            const minimumRuns = parseInt('${{ github.event.inputs.minimum_runs || '5' }}');
            const cutoffDate = new Date(Date.now() - (daysToKeep * 24 * 60 * 60 * 1000));
            
            console.log(`Deleting runs older than ${daysToKeep} days (before ${cutoffDate.toISOString()})`);
            console.log(`Keeping minimum ${minimumRuns} runs per workflow`);
            
            // Get all workflows
            const workflows = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            for (const workflow of workflows.data.workflows) {
              console.log(`\nProcessing workflow: ${workflow.name}`);
              
              // Get runs for this workflow
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow.id,
                per_page: 100,
              });
              
              // Sort runs by created date (newest first)
              const sortedRuns = runs.data.workflow_runs.sort((a, b) => 
                new Date(b.created_at) - new Date(a.created_at)
              );
              
              let deletedCount = 0;
              
              for (let i = minimumRuns; i < sortedRuns.length; i++) {
                const run = sortedRuns[i];
                const runDate = new Date(run.created_at);
                
                if (runDate < cutoffDate) {
                  try {
                    await github.rest.actions.deleteWorkflowRun({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      run_id: run.id,
                    });
                    deletedCount++;
                    console.log(`  Deleted run #${run.run_number} from ${runDate.toISOString()}`);
                  } catch (error) {
                    console.log(`  Failed to delete run #${run.run_number}: ${error.message}`);
                  }
                }
              }
              
              console.log(`  Deleted ${deletedCount} old runs for ${workflow.name}`);
            }

      - name: 📊 Summary Report
        run: |
          echo "## 🧹 Cleanup Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Retention period: ${{ github.event.inputs.days_to_keep || '30' }} days" >> $GITHUB_STEP_SUMMARY
          echo "- Minimum runs kept: ${{ github.event.inputs.minimum_runs || '5' }} per workflow" >> $GITHUB_STEP_SUMMARY
          echo "- Cleanup completed at: $(date)" >> $GITHUB_STEP_SUMMARY
